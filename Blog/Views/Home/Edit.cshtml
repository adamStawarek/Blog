@model Blog.Models.ViewModels.CreatePostViewModel

@{
    Layout = "_Layout";
}


<h2 style="margin-top: 20px;">Edit post #@Model.Post.Id</h2>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Post.Id" />
            <div class="form-group">
                <label asp-for="Post.Title" class="control-label"></label>
                <input asp-for="Post.Title" required class="form-control" />
                <span asp-validation-for="Post.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Upload image (optional)</label>
                <input class="form-control" name="FormFile" type="file" onchange="document.getElementById('displayedImg').src = window.URL.createObjectURL(this.files[0])" />
            </div>
            <div class="form-group">
                <label asp-for="Post.Content" class="control-label"></label>
                <textarea asp-for="Post.Content" class="form-control" style="min-height: 300px;"></textarea>
                <span asp-validation-for="Post.Content" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Tags" class="control-label"></label>
                <div id="tags">
                    @Html.HiddenFor(m => m.Tags, new { id = "modelTags" })
                    <input type="text" id="add_tag" placeholder="Add a tag......">
                    <div class="tags_dropdown"></div>
                </div>
            </div>
            <input id="hiddenImg" type="hidden" asp-for="Post.Image" />
            <div class="form-group">
                @Html.ActionLink("Cancel", "Index", "Home", null, new { @class = "btn btn-danger" })
                <input type="submit" onclick="beforeSubmit();" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-4">
        <img id="displayedImg" src="@Model.Post.Image" style="max-height: 470px; max-width: 500px;"/>
        <div class="row">
            <button class="btn btn-primary col-xs-3" style="margin: 10px 10px 0 0;" id="btnPrev">Previous</button>
            <button class="btn btn-primary col-xs-3" style="margin: 10px 10px 0 0;" id="btnNext">Next</button>
            <span class="input-group col-xs-5" style="margin: 10px 10px 0 0;">
                <input type="text" placeholder="keyword" id="keywordInput" class="form-control">
                <span class="input-group-btn">
                    <button id="btnKeyword" class="btn btn-default" type="button">
                        <i>
                            <span class="glyphicon glyphicon-search"></span>
                        </i>
                    </button>
                </span>
            </span>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/js/Shared/PexelHelper.js"></script>
    <script src="~/js/Home/Edit.js"></script>
    <script>
        function getTags() {
            var myArray = [];
            @foreach (var d in Model.Tags.Split(',').ToList())
            {
                @:myArray.push("@d");
            }
            return myArray;
        }

        new inputTags({
            asd: true,
            id: 'add_tag',
            tags: getTags(),
            maxTags: 20,
            allowDuplicateTags: false,
            onTagRemove: function(tag) {
                $('#modelTags').val($('#tagInput').val());
            }
        });

        tinymce.init({
            selector: 'textarea',
            plugins: ['codesample', 'preview', 'advlist', 'autolink'],
            codesample_languages: [
                { text: 'HTML/XML', value: 'markup' },
                { text: 'JavaScript', value: 'javascript' },
                { text: 'CSS', value: 'css' },
                { text: 'Python', value: 'python' },
                { text: 'Java', value: 'java' },
                { text: 'C', value: 'c' },
                { text: 'C#', value: 'csharp' },
                { text: 'C++', value: 'cpp' }
            ]
        });
    </script>
}