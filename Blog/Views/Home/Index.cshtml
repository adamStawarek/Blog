@using System.Text.RegularExpressions
@using Blog.Models.ViewModels
@model Blog.Models.ViewModels.HomeViewModel

@{
    Layout = "_Layout";
}

@if (Model.SearchWord != "")
{
    <h2 class="text-primary">Search word: @Model.SearchWord</h2>
}

@if (Model.TagViewModels.Any(t => t.IsSelected))
{
    <h2 class="text-primary">
        Selected tags: @string.Join(' ',Model.TagViewModels.Where(t => t.IsSelected).Select(t=>"#"+t.Tag.Name))       
    </h2>
}

<div class="col-md-9">

    @foreach (var post in @Model.Posts)
    {
        <div class="well" style="@(Model.Posts.IndexOf(post) == 0 ? "margin-top: 20px;" : null)">
            <div class="media">
                <a class="pull-left" href="#">
                    <img class="media-object" src="@post.Image" style="max-width: 300px; max-height: 250px;">
                </a>
                <div class="media-body">
                    <h4 class="media-heading">@Html.ActionLink(post.Title, "Details", new { id = post.Id })</h4>
                    <p class="text-right">By @post.Author</p>
                    <div style="margin-bottom: 20px">
                        @if (Model.SearchWord != "")
                        {
                            var countOfWordsBeforeSearchedWord = 10;
                            var match = Regex.Matches(post.Content, "(\n|^).*?(?=\n|$)").Cast<Match>().FirstOrDefault(m => m.ToString().ToLower().Contains(Model.SearchWord.ToLower()));

                            var searchWordWithIndex = match?.ToString().Split().Select((value, index) => new { value, index = index + 1 })
                                .FirstOrDefault(s => s.ToString().ToLower().Contains(Model.SearchWord.ToLower()));

                            var sentence = string.Join(' ', match?.ToString().Split()
                                .Skip(searchWordWithIndex?.index - countOfWordsBeforeSearchedWord < 0 ? 0 : searchWordWithIndex.index - countOfWordsBeforeSearchedWord)
                                .Take(2 * countOfWordsBeforeSearchedWord));

                            @Html.Raw(sentence
                                .Replace("<p", "<p style='display:inline;'")
                                .Replace(searchWordWithIndex?.value, $"<span style='background-color: #FFFF00'>{searchWordWithIndex?.value}</span>"))
                        }
                        else
                        {
                            @Html.Raw(Regex.Matches(post.Content, "(\n|^).*?(?=\n|$)").Cast<Match>().FirstOrDefault()?.ToString().Replace("<p", "<p style='display:inline;'"))
                        }


                        @Html.ActionLink("...more", "Details", new { id = post.Id })
                    </div>
                    <ul class="list-inline list-unstyled">
                        <li><span><i class="glyphicon glyphicon-calendar"></i> @post.LastEditTime.ToShortDateString() </span></li>

                        @if (post.Comments.Count > 0)
                        {
                            <li>|</li>
                            <span><i class="glyphicon glyphicon-comment"></i> @post.Comments.Count comments</span>
                            <li>|</li>
                        }

                        <li>
                            @for (int j = 0; j < @post.Stars; j++)
                            {
                                <span class="glyphicon glyphicon-star"></span>
                            }
                            @for (int j = 0; j < 5 - @post.Stars; j++)
                            {
                                <span class="glyphicon glyphicon-star-empty"></span>
                            }
                        </li>
                    </ul>
                    <div class="media-bottom">

                        @foreach (var tag in @post.PostTags)
                        {
                            <span class=" label label-info">@tag.Tag.Name</span>
                        }

                        @if (User.Identity.IsAuthenticated && User.IsInRole("Admins"))
                        {

                            using (Html.BeginForm("Delete", "Home", new {@post.Id}, FormMethod.Post, null, new {style = "display:inline;"}))
                             {
                                 @Html.AntiForgeryToken()
                                 <button type="submit" class="btn btn-danger"
                                         style="float: right">
                                     Delete
                                 </button>
                             }

                            @Html.ActionLink("Edit", "Edit", new {id = post.Id},
                                new {@class = "btn btn-primary", @style = "float:right;margin-right:10px;"})
                        }

                    </div>
                </div>

            </div>
        </div>
    }
    <div id="pagination" style="text-align: right">
        @{
            for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.CurrentPage)
                {

                    @Html.ActionLink(i.ToString(), "Index"
                        , new { currentPage= i, searchWord=Model.SearchWord,tagIds = Model.TagViewModels.Where(t=>t.IsSelected).Select(t=>t.Tag.Id).ToList() }
                        , new { style = "margin-right: 5px;", @class = "btn btn-primary" });
                }
                else
                {
                    @Html.ActionLink(i.ToString(), "Index"
                        , new { currentPage = i, searchWord = Model.SearchWord, tagIds = Model.TagViewModels.Where(t => t.IsSelected).Select(t => t.Tag.Id).ToList() }
                        , new { style = "margin-right: 5px;", @class = "btn btn-default" });
                }
            }
        }
    </div>

</div>
<div class="col-md-3">
    @await Html.PartialAsync("_NavigationPanel", new NavigationPanelViewModel() { TagViewModels = Model.TagViewModels, SearchWord = Model.SearchWord })
</div>

@section Scripts
    {
    <script src="~/js/Home/Index.js"></script>
}
